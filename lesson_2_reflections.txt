What happens when you initialize a repository? Why do you need to do it?
	
	Initializing a git repository creates the file .git.  This will allow 
	commits to be saved for this repository and keep all history of commits.

How can you use the staging area to make sure you have one commit per 
logical change?

	Place the file you changed into the staging are using git add and then 
	use git diff without any arguments to print out the changes made to the 
	file in the staging as compares to the version currently saved in the 
	working directory.

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

	When you want to test out an experiemental feature that may or may not 
	be incorporated later without while maintaining (bug fixing and such) 
	the main (master) string of files.

How do the diagrams help you visualize the branch structure?

	Diagrams easily show how each commit is interconnected and related to 
	one another.  They can show all the branches created for a particular 
	repository and the trail to get to a certain branch from any point.

What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

	Merging two branches essentially removes one of the branches from the 
	point in time the branches were merged and onward.  We represent the 
	merged commit as an entity with the two parents (latest commits of each 
	branch) because they are both sourced to create this one entity.

